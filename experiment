1、Parsec benchmark
目的：系统性能测试
原理：（共享内存计算机的parsec benchmark）
9个应用程序+3个内核组成，并行模型+机器需求和运行时行为的不同组合
这个benchmark本质是测处理器性能的。我们是控制统一硬件 然后调整 os 来展示os的性能，操作系统越高效我们的workload跑的就越快，并且parsec支持 thread-level parallesim，这些都会展示一个操作系统的好坏
基本思路：
（1）在原rcore操作系统上运行parsec benchmark测试；
（2）在实验Thetis优化后的rcore中运行parsec benchmark测试，并与（1）的结果进行比较；
如果性能降低不多，或者性能基本不变，就可以解释为，我们提供的安全保证并没有带来太多的性能缺陷（其实等价于，系统中的锁的开销和使用struct直接替换的内存开销，并没有很严重）

2、Miri：https://github.com/rust-lang/miri
目的：系统安全性测试
原理：miri可以检测常见的未定义行为UB，miri是比较认可的那种unsafe rust中未定义行为检测的一个方式方法；
基本思路：
（1）在原BlogOS操作系统上运行miri测试，分类统计UB（最好可以按照有限类unsafe Rust类型进行统计）；
（2）在实验Thetis优化后的BlogOS中运行miri测试，分类统计UB，并与（1）的结果进行比较；
如果得到UB行为降低，那么就可以说明安全性得到提升；
扩展：
（1）miri是不能检测出所有的UB行为，因此需要解释（从降低误报，提高安全性进行解释）；
（2）SafeDrop论文里用到miri，具体看下这个论文对上面思路扩展补充；

从整体的角度去看待这两个测试：
（1）好处：
如果miri的测试可以说明安全性得到提升，并且benchmark的测试可以说明性能降低的不多或基本不变，那么就为论文中的方法提供很好佐证。并且解决了别人可能提出的论文里锁性能开销的问题等。
（2）缺点：
如果两个实验成功做出来了，那么别人会不会有疑问，BlogOS和rcore系统来回测试系统的切换。
其次，我觉得论文里还有一个缺陷：因为论文的故事性引入了形式化验证的复杂性降低，但是其实我们最后给出的复杂性降低是从代码量和耦合角度考虑，所以是不是也可以考虑下，怎么通过实验去说明呢？（当然，这点肯定是基于前面两个实验都测试完成，而且效果不错的基础上了）
